
// Create a client instance
const mqtt = new Paho.Client('vango.me', 8883, "<%= @host.auth.session[params[:cha]] %>");

lwt_p = state;
lwt_p['state'] = 0;
lwt = new Paho.Message(JSON.stringify(lwt_p));
lwt.destinationName = '<%= @host.id %>';

// set callback handlers
mqtt.onConnectionLost = function(rO) {
    if (rO.errorCode !== 0) {
	log({ color: 'red', icon: 'notifications', message: rO.errorMessage });
	$("#title").css('color', 'red');
	mqtt.disconnect();
	mqttConnect();
    }
}
mqtt.onMessageArrived = function(message) {
    console.log("mqtt", message);
    var topic = message.destinationName;
    var payload = message.payloadString;
    if (payload[0] == '{') {
	var j = JSON.parse(message.payloadString);
	if (j.update) {
	    for (const [key, value] of Object.entries(j.update)) {
		$("#" + `${key}` + "_val").text(`${value}`);
	    }
	}
    } else {
	var pp = payload.split(' ')
	if (pp[0] == 'DEV') {
	    var ppp = pp[3].split('/')
	    var dev = ppp[1];
	    var ip = pp[1];
	    var msg = dev + ' listening at ' + ip
	    var j = { message: msg, icon: 'devices', color: 'green', from: '>' + dev }
	} else {
	    var j = { message: payload, icon: 'message', color: 'grey' }
	}
    }
    log(j);
}
// connect the client
function mqttConnect() {
    mqtt.connect({ reconnect: true,
		   cleanSession: true,
		   timeout:3,
		   //keepAliveInterval: 10,
		   <%# if /https/.match(request.url) %>
		   useSSL: true,
		   <%# end %>
		   willMessage: lwt,
		   onSuccess: function() {
		       mqtt.subscribe('<%= @host.id %>/');
		       mqtt.subscribe('<%= @host.id %>/<%= @host.auth.session[params[:cha]] %>')
		       $("#title").css('color', 'orange');
		       sendUser('', { icon: 'notifications', color: 'green', message: 'connected.' });
		   },
		   onFailure: function() {
		       $("#title").css('color', 'red');
		       mqttConnect();
		   }
		 });
}

function sendMqtt(t, j) {
    console.log('sendMqtt', j);
    message = new Paho.Message(j);
    message.destinationName = "<%= @host.id %>/" + t;
    mqtt.send(message);
}
function sendUser(t, j) {
    j['vs'] = state.vs;
    j['from'] = state.name || 'anonymous';
    j['rank'] = state.rank;
    j['class'] = state.class;
    sendMqtt(t, JSON.stringify(j));
}

mqttConnect();
